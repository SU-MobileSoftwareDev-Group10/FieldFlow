// Mocks generated by Mockito 5.4.5 from annotations
// in field_flow/test/position_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:field_flow/providers/position_provider.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PositionProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPositionProvider extends _i1.Mock implements _i2.PositionProvider {
  MockPositionProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LocationAccuracy get locationAccuracy =>
      (super.noSuchMethod(
            Invocation.getter(#locationAccuracy),
            returnValue: _i3.LocationAccuracy.lowest,
          )
          as _i3.LocationAccuracy);

  @override
  set locationAccuracy(_i3.LocationAccuracy? _locationAccuracy) =>
      super.noSuchMethod(
        Invocation.setter(#locationAccuracy, _locationAccuracy),
        returnValueForMissingStub: null,
      );

  @override
  int get distanceFilterInMeters =>
      (super.noSuchMethod(
            Invocation.getter(#distanceFilterInMeters),
            returnValue: 0,
          )
          as int);

  @override
  set distanceFilterInMeters(int? _distanceFilterInMeters) =>
      super.noSuchMethod(
        Invocation.setter(#distanceFilterInMeters, _distanceFilterInMeters),
        returnValueForMissingStub: null,
      );

  @override
  set timeLimit(Duration? _timeLimit) => super.noSuchMethod(
    Invocation.setter(#timeLimit, _timeLimit),
    returnValueForMissingStub: null,
  );

  @override
  set currentPosition(_i3.Position? _currentPosition) => super.noSuchMethod(
    Invocation.setter(#currentPosition, _currentPosition),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<(bool, String?)> get canTrackPosition =>
      (super.noSuchMethod(
            Invocation.getter(#canTrackPosition),
            returnValue: _i4.Future<(bool, String?)>.value((false, null)),
          )
          as _i4.Future<(bool, String?)>);

  @override
  bool get isTracking =>
      (super.noSuchMethod(Invocation.getter(#isTracking), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void startTracking(
    void Function()? callback, {
    Duration? every = const Duration(minutes: 1),
  }) => super.noSuchMethod(
    Invocation.method(#startTracking, [callback], {#every: every}),
    returnValueForMissingStub: null,
  );

  @override
  void stopTracking() => super.noSuchMethod(
    Invocation.method(#stopTracking, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
