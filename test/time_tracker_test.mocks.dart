// Mocks generated by Mockito 5.4.5 from annotations
// in field_flow/test/time_tracker_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i5;

import 'package:field_flow/db/firestore_helper.dart' as _i6;
import 'package:field_flow/model/day_model.dart' as _i9;
import 'package:field_flow/model/location_model.dart' as _i3;
import 'package:field_flow/model/week_model.dart' as _i10;
import 'package:field_flow/providers/time_tracker.dart' as _i2;
import 'package:geolocator/geolocator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TimeTracker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeTracker extends _i1.Mock implements _i2.TimeTracker {
  MockTimeTracker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set checkInTime(DateTime? _checkInTime) => super.noSuchMethod(
    Invocation.setter(#checkInTime, _checkInTime),
    returnValueForMissingStub: null,
  );

  @override
  set checkOutTime(DateTime? _checkOutTime) => super.noSuchMethod(
    Invocation.setter(#checkOutTime, _checkOutTime),
    returnValueForMissingStub: null,
  );

  @override
  set lastCheckOutTime(DateTime? _lastCheckOutTime) => super.noSuchMethod(
    Invocation.setter(#lastCheckOutTime, _lastCheckOutTime),
    returnValueForMissingStub: null,
  );

  @override
  List<_i3.LocationModel> get locationList =>
      (super.noSuchMethod(
            Invocation.getter(#locationList),
            returnValue: <_i3.LocationModel>[],
          )
          as List<_i3.LocationModel>);

  @override
  set locationList(List<_i3.LocationModel>? _locationList) =>
      super.noSuchMethod(
        Invocation.setter(#locationList, _locationList),
        returnValueForMissingStub: null,
      );

  @override
  bool get checkedIn =>
      (super.noSuchMethod(Invocation.getter(#checkedIn), returnValue: false)
          as bool);

  @override
  set checkedIn(bool? _checkedIn) => super.noSuchMethod(
    Invocation.setter(#checkedIn, _checkedIn),
    returnValueForMissingStub: null,
  );

  @override
  bool get checkedOut =>
      (super.noSuchMethod(Invocation.getter(#checkedOut), returnValue: false)
          as bool);

  @override
  set checkedOut(bool? _checkedOut) => super.noSuchMethod(
    Invocation.setter(#checkedOut, _checkedOut),
    returnValueForMissingStub: null,
  );

  @override
  set currentEntryId(String? _currentEntryId) => super.noSuchMethod(
    Invocation.setter(#currentEntryId, _currentEntryId),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void checkIn() => super.noSuchMethod(
    Invocation.method(#checkIn, []),
    returnValueForMissingStub: null,
  );

  @override
  void checkOut(List<(_i4.Position, DateTime)>? rawPositions) =>
      super.noSuchMethod(
        Invocation.method(#checkOut, [rawPositions]),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.LocationModel> processRawPosition(
    List<(_i4.Position, DateTime)>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processRawPosition, [data]),
            returnValue: <_i3.LocationModel>[],
          )
          as List<_i3.LocationModel>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FirestoreHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreHelper extends _i1.Mock implements _i6.FirestoreHelper {
  MockFirestoreHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> saveCheckIn(DateTime? checkInTime) =>
      (super.noSuchMethod(
            Invocation.method(#saveCheckIn, [checkInTime]),
            returnValue: _i7.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#saveCheckIn, [checkInTime]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> saveCheckOut(
    String? entryId,
    DateTime? checkOutTime,
    List<_i3.LocationModel>? locations,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveCheckOut, [
              entryId,
              checkOutTime,
              locations,
            ]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Stream<List<_i9.DayModel>> getDaysStream({required String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#getDaysStream, [], {#userId: userId}),
            returnValue: _i7.Stream<List<_i9.DayModel>>.empty(),
          )
          as _i7.Stream<List<_i9.DayModel>>);

  @override
  _i7.Stream<List<_i10.WeekModel>> getWeeksStream({required String? userId}) =>
      (super.noSuchMethod(
            Invocation.method(#getWeeksStream, [], {#userId: userId}),
            returnValue: _i7.Stream<List<_i10.WeekModel>>.empty(),
          )
          as _i7.Stream<List<_i10.WeekModel>>);
}
